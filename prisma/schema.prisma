// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  telegramId      Int       @id
  name            String
  createdAt       DateTime  @default(now())
  silentStartTime DateTime?
  silentEndTime   DateTime?

  //stats
  gymTimesNotified      Int      @default(0)
  locationTimesNotified Int      @default(0)
  lastActivity          DateTime @default(now())

  //f keys
  GymSubscribe      GymSubscribe[]
  LocationSubscribe LocationSubscribe[]
}

model Gym {
  id           String         @id @default(uuid())
  gymString    String         @unique
  lat          Float
  long         Float
  GymSubscribe GymSubscribe[]
}

model GymSubscribe {
  subscriber     User       @relation(fields: [userTelegramId], references: [telegramId])
  userTelegramId Int
  gym            Gym        @relation(fields: [gymId], references: [id])
  gymId          String
  GymEvent       GymEvent[]

  @@id([userTelegramId, gymId])
}

model GymEvent {
  eventTime                  DateTime
  gymSubscribe               GymSubscribe @relation(fields: [gymSubscribeUserTelegramId, gymSubscribeGymId], references: [userTelegramId, gymId], onDelete: Cascade)
  gymSubscribeUserTelegramId Int
  gymSubscribeGymId          String

  @@id([eventTime, gymSubscribeGymId, gymSubscribeUserTelegramId])
}

model LocationSubscribe {
  locationId     String          @id @default(uuid())
  subscriber     User            @relation(fields: [userTelegramId], references: [telegramId])
  userTelegramId Int
  lat            Float
  long           Float
  Radius         Float
  LocationEvent  LocationEvent[]
}

model LocationEvent {
  locationSubscribe           LocationSubscribe @relation(fields: [locationSubscribeLocationId], references: [locationId], onDelete: Cascade)
  locationSubscribeLocationId String
  lat                         Float
  long                        Float
  eventTime                   DateTime

  @@id([locationSubscribeLocationId, eventTime])
}
